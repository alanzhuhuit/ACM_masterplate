#include <stdio.h>
#include <algorithm>
#include <cstring>
#include <math.h>
#include <iostream>
#include <queue>

using namespace std;

struct Edge
{
    	int v, next, weight;
};

struct Node
{
    	int v, weight;
};


bool operator <(const Node &a,const Node &b)
{
    	return a.weight > b.weight;
}

priority_queue<Node> q;

const int MAXN = 10000;

Edge e[MAXN];
int p[MAXN], eid;
bool vist[MAXN];

int EdgeNum, NodeNum;

int Add_Edge(int from, int to, int weight)
{
    	e[eid].next = p[from];
    	e[eid].v = to;
    	e[eid].weight = weight;
   	 p[from] = eid++;
    	return 0;
}

int init()
{
    	memset(p, -1, sizeof(p));
    	memset(vist, 0, sizeof(vist));
    	while (!q.empty())
   	 {
       	 	q.pop();
  	 }
    	eid=0;
    	int from, to, weight;
    	for (int i = 0; i < NodeNum; i++)
    	{
        		scanf("%d%d%d", &from, &to, &weight);
       		 Add_Edge(from, to, weight);
        		//Add_Edge(to, from, weight);//无向图
    	}
    	return 0;
}

int print(int Ans)
{
   	printf("%d\n",Ans);
    	return 0;
}

int Prim()
{
    	int weight = 0;
    	init();

    	Node t;
    	t.v = //from;//选择起点
    	t.weight = 0;
   	q.push(t);

   	int tt = 0;
    	while (!q.empty() && tt < NodeNum)
    	{
        	t = q.top();    q.pop();

        	if (vist[t.v])
        	{
           	 	continue;
        	}

        	weight += t.weight;
        	tt++;
        	vist[t.v]=true;

        	for (int j = p[t.v]; j != -1; j = e[j].next)
        	{
          		if (!vist[e[j].v])
            		{
                		Node temp;
                		temp.v = e[j].v;
                		temp.weight = e[j].weight;
                		q.push(temp);
            		}
        	}
    	}

    	print(weight);
	return 0;
}


int main()
{
    	while (scanf("%d%d", &NodeNum, &EdgeNum)!=EOF)
    	{
       		Prim();
    	}
    	return 0;
}