const int ChildNum=26;
struct node
{
    int cnt;//是否为该单词的最后一个节点
    node* child[ChildNum];//Tire每个节点的26个子节点（最多26个字母）
    node()//构造函数初始化
    {
        cnt = 0;
        memset(child,NULL,sizeof(child));
    }
};

const int MAXT = 1e6+10;

node *root;
char str[100];

void INSERT(char str[])
{
    node* s = root;
    int i = 0, len = strlen(str);
    s->cnt++;
    while(i < len)
    {
        int id = str[i] - 'a';
        if (s->child[id] == NULL)
            s->child[id] = new node;
        s = s->child[id];
        s->cnt++;
        i++;
    }
    return;
}

int Count(char str[])
{
    node* now = root;
    int i = 0, id, len = strlen(str);
    while (i < len)
    {
        id = str[i] - 'a';
        if (now->child[id] == NULL) return 0;
        now = now->child[id];
        i++;
    }
    return now->cnt;
}

int main()
{
    ios::sync_with_stdio(false);
    freopen("in", "r", stdin);
    int n, t;
    while(cin >> n)
    {
        root = new node;
        REP(i, n) cin >> str, INSERT(str);

        cin >> t;
        REP(i, n) cin >> str, cout << Count(str) << endl;
    }
    return 0;
}
